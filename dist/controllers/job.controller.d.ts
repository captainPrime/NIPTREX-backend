import { NextFunction, Request, Response } from 'express';
import JobService from '@/services/job.service';
import UserService from '@/services/users.service';
import AboutService from '@/services/about.service';
import PreferenceService from '@/services/preference.service';
import BidService from '@/services/bid.service';
declare class JobController {
    jobService: JobService;
    bidService: BidService;
    userService: UserService;
    aboutService: AboutService;
    preferenceService: PreferenceService;
    createJob: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    updateJob: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getAllJobs: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getFeaturedJobs: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getAllSkillsCategory: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getAllSkills: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    technicalTools: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getAllSoftSkills: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getUserJobBestMatches: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getMostRecentJobs: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getSimilarJobs: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getJobById: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getJobByClientId: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getUserSavedJobs: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getUserSavedItems: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    savedJob: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    unSaveJob: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    hireFreelancer: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getFreelancerContracts: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getFreelancerContractsById: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    getFreelancerContractsByIdClient: (req: Request, res: Response, next: NextFunction) => Promise<void>;
    freelanceWorkHistory: (req: Request, res: Response, next: NextFunction) => Promise<void>;
}
export default JobController;
