import mongoose from 'mongoose';
import JobService from './job.service';
import UserService from './users.service';
import AboutService from './about.service';
import EmailService from '@/modules/email/email.service';
import { PaginationOptions } from '@/interfaces/job.inteface';
import { BiddingStage, IBidding, IUpdateBidding } from '@/models/bid.model';
declare class BidService {
    bid: any;
    jobService: JobService;
    userService: UserService;
    emailService: EmailService;
    aboutService: AboutService;
    archive: any;
    shortlist: any;
    bidJob(body: IBidding): Promise<any>;
    updateBid(selector: string, job_id: string, body: IUpdateBidding): Promise<any>;
    updateMilestoneById(selector: string, milestoneId: string, milestoneData: Partial<BiddingStage>): Promise<any>;
    updateOutrightStatus(selector: string, milestoneData: Partial<IBidding>): Promise<any>;
    requestMilestoneReview(proposalId: string, milestoneId: string, clientId: string, userId: string, proposal_type: string): Promise<void>;
    getTopBidders(id: mongoose.Types.ObjectId | string): Promise<any>;
    getAllBidders(id: string | mongoose.Types.ObjectId): Promise<any>;
    getBidders(id: mongoose.Types.ObjectId | string, options: PaginationOptions): Promise<any>;
    getProposalById(id: mongoose.Types.ObjectId | string): Promise<any>;
    getAllProposal(): Promise<any>;
    getBidByJob(id: mongoose.Types.ObjectId | string): Promise<any>;
    getBidById(id: mongoose.Types.ObjectId | string): Promise<any>;
    likeProposal(proposalId: mongoose.Types.ObjectId | string): Promise<any>;
    dislikeProposal(proposalId: mongoose.Types.ObjectId | string): Promise<any>;
    archiveProposal(payload: any): Promise<any>;
    shortListProposal(payload: any): Promise<any>;
    getArchiveProposalById(id: mongoose.Types.ObjectId | string): Promise<any>;
    getUserArchivedProposals(id: mongoose.Types.ObjectId | string): Promise<any>;
    getShortListById(id: mongoose.Types.ObjectId | string): Promise<any>;
    getUserShortLists(id: mongoose.Types.ObjectId | string): Promise<any>;
}
export default BidService;
