import { PaginationOptions } from '../interfaces/job.inteface';
import { IService, IServiceProposal } from '../models/service.models';
import EmailService from '../modules/email/email.service';
import mongoose from 'mongoose';
import UserService from './users.service';
declare class ServiceService {
    service: any;
    userService: UserService;
    emailService: EmailService;
    hireService: any;
    serviceProposal: any;
    createService(body: IService): Promise<IService>;
    getAllService(filter: any, options: PaginationOptions): Promise<any[]>;
    getServiceById(id: mongoose.Types.ObjectId | string): Promise<IService>;
    getServiceByUserId(options: PaginationOptions, filter: any): Promise<IService[] | null>;
    updateServiceById(id: mongoose.Types.ObjectId | string, body: Partial<IService>): Promise<IService>;
    deleteService(id: mongoose.Types.ObjectId | string): Promise<IService>;
    hireFreelancerService(payload: any): Promise<any>;
    getAppliedServices(userId: string, options: PaginationOptions): Promise<any>;
    createServiceProposal(payload: any): Promise<any>;
    getServiceProposalByIdInternal(id: mongoose.Types.ObjectId | string): Promise<any>;
    getServiceProposalById(id: mongoose.Types.ObjectId | string): Promise<any>;
    getServiceProposalByServiceId(id: mongoose.Types.ObjectId | string): Promise<any>;
    getAllServiceProposalByServiceId(id: mongoose.Types.ObjectId | string): Promise<any>;
    getAllServiceProposal(id: mongoose.Types.ObjectId | string): Promise<any>;
    updateServiceProjectById(id: mongoose.Types.ObjectId | string, body: Partial<IServiceProposal>): Promise<IServiceProposal>;
    requestServiceReview(proposalId: string, clientId: string, userId: string): Promise<any>;
    approveService(id: mongoose.Types.ObjectId | string, userId: string, body: Partial<IServiceProposal>): Promise<IServiceProposal>;
}
export default ServiceService;
